//---------------------------------------------------------------------
// This file is automatically generated. All manual edits will be lost.
//---------------------------------------------------------------------
// Service implementation for the NI-MXLCTERMINALADAPTOR-RESTRICTED Metadata
//---------------------------------------------------------------------
#include "nimxlcTerminalAdaptor_restricted_library.h"

#if defined(_MSC_VER)
static const char* kLibraryName = "nimxlcTerminalAdaptor.dll";
#else
static const char* kLibraryName = "liblibnimxlcTerminalAdaptor.so.1";
#endif

namespace nimxlcterminaladaptor_restricted_grpc {

NimxlcTerminalAdaptorRestrictedLibrary::NimxlcTerminalAdaptorRestrictedLibrary() : shared_library_(kLibraryName)
{
  shared_library_.load();
  bool loaded = shared_library_.is_loaded();
  memset(&function_pointers_, 0, sizeof(function_pointers_));
  if (!loaded) {
    return;
  }
  function_pointers_.createSession = reinterpret_cast<createSessionPtr>(shared_library_.get_function_pointer("nimxlc_ta_nimxlc_createSession"));
  function_pointers_.destroySession = reinterpret_cast<destroySessionPtr>(shared_library_.get_function_pointer("nimxlc_ta_nimxlc_destroySession"));
  function_pointers_.refreshTerminalCache = reinterpret_cast<refreshTerminalCachePtr>(shared_library_.get_function_pointer("nimxlc_ta_nimxlc_refreshTerminalCache"));
  function_pointers_.hasTerminalInformationChanged = reinterpret_cast<hasTerminalInformationChangedPtr>(shared_library_.get_function_pointer("nimxlc_ta_nimxlc_hasTerminalInformationChanged"));
  function_pointers_.getSystemChangeNumber = reinterpret_cast<getSystemChangeNumberPtr>(shared_library_.get_function_pointer("nimxlc_ta_nimxlc_getSystemChangeNumber"));
}

NimxlcTerminalAdaptorRestrictedLibrary::~NimxlcTerminalAdaptorRestrictedLibrary()
{
}

::grpc::Status NimxlcTerminalAdaptorRestrictedLibrary::check_function_exists(std::string functionName)
{
  return shared_library_.function_exists(functionName.c_str())
    ? ::grpc::Status::OK
    : ::grpc::Status(::grpc::NOT_FOUND, "Could not find the function " + functionName);
}

nimxlc_Session NimxlcTerminalAdaptorRestrictedLibrary::createSession(const char hostname[], nierr_Status* cStatus)
{
  if (!function_pointers_.createSession) {
    throw nidevice_grpc::LibraryLoadException("Could not find nimxlc_ta_nimxlc_createSession.");
  }
  return function_pointers_.createSession(hostname, cStatus);
}

void NimxlcTerminalAdaptorRestrictedLibrary::destroySession(nimxlc_Session session)
{
  if (!function_pointers_.destroySession) {
    throw nidevice_grpc::LibraryLoadException("Could not find nimxlc_ta_nimxlc_destroySession.");
  }
  return function_pointers_.destroySession(session);
}

void NimxlcTerminalAdaptorRestrictedLibrary::refreshTerminalCache(nimxlc_Session session, nierr_Status* cStatus)
{
  if (!function_pointers_.refreshTerminalCache) {
    throw nidevice_grpc::LibraryLoadException("Could not find nimxlc_ta_nimxlc_refreshTerminalCache.");
  }
  return function_pointers_.refreshTerminalCache(session, cStatus);
}

bool NimxlcTerminalAdaptorRestrictedLibrary::hasTerminalInformationChanged(nimxlc_Session session, uint32_t systemChangeNumber, nierr_Status* cStatus)
{
  if (!function_pointers_.hasTerminalInformationChanged) {
    throw nidevice_grpc::LibraryLoadException("Could not find nimxlc_ta_nimxlc_hasTerminalInformationChanged.");
  }
  return function_pointers_.hasTerminalInformationChanged(session, systemChangeNumber, cStatus);
}

uint32_t NimxlcTerminalAdaptorRestrictedLibrary::getSystemChangeNumber(nimxlc_Session session, nierr_Status* cStatus)
{
  if (!function_pointers_.getSystemChangeNumber) {
    throw nidevice_grpc::LibraryLoadException("Could not find nimxlc_ta_nimxlc_getSystemChangeNumber.");
  }
  return function_pointers_.getSystemChangeNumber(session, cStatus);
}

}  // namespace nimxlcterminaladaptor_restricted_grpc
